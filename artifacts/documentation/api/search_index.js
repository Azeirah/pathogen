var search_data = {
    'index': {
        'searchIndex': ["eloquent","eloquent\\pathogen","eloquent\\pathogen\\exception","eloquent\\pathogen\\factory","eloquent\\pathogen\\filesystem","eloquent\\pathogen\\filesystem\\factory","eloquent\\pathogen\\filesystem\\normalizer","eloquent\\pathogen\\normalizer","eloquent\\pathogen\\resolver","eloquent\\pathogen\\unix","eloquent\\pathogen\\unix\\factory","eloquent\\pathogen\\unix\\normalizer","eloquent\\pathogen\\windows","eloquent\\pathogen\\windows\\exception","eloquent\\pathogen\\windows\\factory","eloquent\\pathogen\\windows\\normalizer","eloquent\\pathogen\\windows\\resolver","eloquent\\pathogen\\absolutepath","eloquent\\pathogen\\absolutepathinterface","eloquent\\pathogen\\abstractpath","eloquent\\pathogen\\exception\\abstractinvalidpathatomexception","eloquent\\pathogen\\exception\\abstractinvalidpathexception","eloquent\\pathogen\\exception\\emptypathatomexception","eloquent\\pathogen\\exception\\emptypathexception","eloquent\\pathogen\\exception\\invalidpathatomcharacterexception","eloquent\\pathogen\\exception\\invalidpathatomexceptioninterface","eloquent\\pathogen\\exception\\invalidpathexceptioninterface","eloquent\\pathogen\\exception\\invalidpathstateexception","eloquent\\pathogen\\exception\\nonabsolutepathexception","eloquent\\pathogen\\exception\\nonrelativepathexception","eloquent\\pathogen\\exception\\pathatomcontainsseparatorexception","eloquent\\pathogen\\exception\\undefinedatomexception","eloquent\\pathogen\\factory\\pathfactory","eloquent\\pathogen\\factory\\pathfactoryinterface","eloquent\\pathogen\\filesystem\\absolutefilesystempathinterface","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactory","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactoryinterface","eloquent\\pathogen\\filesystem\\factory\\platformfilesystempathfactory","eloquent\\pathogen\\filesystem\\filesystempath","eloquent\\pathogen\\filesystem\\filesystempathinterface","eloquent\\pathogen\\filesystem\\normalizer\\filesystempathnormalizer","eloquent\\pathogen\\filesystem\\platformfilesystempath","eloquent\\pathogen\\filesystem\\relativefilesystempathinterface","eloquent\\pathogen\\normalizer\\pathnormalizer","eloquent\\pathogen\\normalizer\\pathnormalizerinterface","eloquent\\pathogen\\path","eloquent\\pathogen\\pathinterface","eloquent\\pathogen\\relativepath","eloquent\\pathogen\\relativepathinterface","eloquent\\pathogen\\resolver\\basepathresolver","eloquent\\pathogen\\resolver\\basepathresolverinterface","eloquent\\pathogen\\resolver\\boundpathresolver","eloquent\\pathogen\\resolver\\pathresolverinterface","eloquent\\pathogen\\unix\\absoluteunixpath","eloquent\\pathogen\\unix\\absoluteunixpathinterface","eloquent\\pathogen\\unix\\factory\\unixpathfactory","eloquent\\pathogen\\unix\\normalizer\\unixpathnormalizer","eloquent\\pathogen\\unix\\relativeunixpath","eloquent\\pathogen\\unix\\relativeunixpathinterface","eloquent\\pathogen\\unix\\unixpath","eloquent\\pathogen\\unix\\unixpathinterface","eloquent\\pathogen\\windows\\absolutewindowspath","eloquent\\pathogen\\windows\\absolutewindowspathinterface","eloquent\\pathogen\\windows\\exception\\drivemismatchexception","eloquent\\pathogen\\windows\\exception\\invaliddrivespecifierexception","eloquent\\pathogen\\windows\\factory\\windowspathfactory","eloquent\\pathogen\\windows\\factory\\windowspathfactoryinterface","eloquent\\pathogen\\windows\\normalizer\\windowspathnormalizer","eloquent\\pathogen\\windows\\relativewindowspath","eloquent\\pathogen\\windows\\relativewindowspathinterface","eloquent\\pathogen\\windows\\resolver\\windowsbasepathresolver","eloquent\\pathogen\\windows\\windowspath","eloquent\\pathogen\\windows\\windowspathinterface","eloquent\\pathogen\\absolutepath::fromstring","eloquent\\pathogen\\absolutepath::fromatoms","eloquent\\pathogen\\absolutepath::string","eloquent\\pathogen\\absolutepath::jointrailingslash","eloquent\\pathogen\\absolutepath::toabsolute","eloquent\\pathogen\\absolutepath::torelative","eloquent\\pathogen\\absolutepath::isroot","eloquent\\pathogen\\absolutepath::isparentof","eloquent\\pathogen\\absolutepath::isancestorof","eloquent\\pathogen\\absolutepath::relativeto","eloquent\\pathogen\\absolutepath::resolve","eloquent\\pathogen\\absolutepathinterface::isroot","eloquent\\pathogen\\absolutepathinterface::isparentof","eloquent\\pathogen\\absolutepathinterface::isancestorof","eloquent\\pathogen\\absolutepathinterface::relativeto","eloquent\\pathogen\\absolutepathinterface::resolve","eloquent\\pathogen\\abstractpath::__construct","eloquent\\pathogen\\abstractpath::atoms","eloquent\\pathogen\\abstractpath::atomat","eloquent\\pathogen\\abstractpath::atomatdefault","eloquent\\pathogen\\abstractpath::sliceatoms","eloquent\\pathogen\\abstractpath::hasatoms","eloquent\\pathogen\\abstractpath::hastrailingseparator","eloquent\\pathogen\\abstractpath::string","eloquent\\pathogen\\abstractpath::__tostring","eloquent\\pathogen\\abstractpath::name","eloquent\\pathogen\\abstractpath::nameatoms","eloquent\\pathogen\\abstractpath::nameatomat","eloquent\\pathogen\\abstractpath::nameatomatdefault","eloquent\\pathogen\\abstractpath::slicenameatoms","eloquent\\pathogen\\abstractpath::namewithoutextension","eloquent\\pathogen\\abstractpath::nameprefix","eloquent\\pathogen\\abstractpath::namesuffix","eloquent\\pathogen\\abstractpath::extension","eloquent\\pathogen\\abstractpath::hasextension","eloquent\\pathogen\\abstractpath::contains","eloquent\\pathogen\\abstractpath::startswith","eloquent\\pathogen\\abstractpath::endswith","eloquent\\pathogen\\abstractpath::matches","eloquent\\pathogen\\abstractpath::matchesregex","eloquent\\pathogen\\abstractpath::namecontains","eloquent\\pathogen\\abstractpath::namestartswith","eloquent\\pathogen\\abstractpath::namematches","eloquent\\pathogen\\abstractpath::namematchesregex","eloquent\\pathogen\\abstractpath::parent","eloquent\\pathogen\\abstractpath::striptrailingslash","eloquent\\pathogen\\abstractpath::stripextension","eloquent\\pathogen\\abstractpath::stripnamesuffix","eloquent\\pathogen\\abstractpath::joinatoms","eloquent\\pathogen\\abstractpath::joinatomsequence","eloquent\\pathogen\\abstractpath::join","eloquent\\pathogen\\abstractpath::jointrailingslash","eloquent\\pathogen\\abstractpath::joinextensions","eloquent\\pathogen\\abstractpath::joinextensionsequence","eloquent\\pathogen\\abstractpath::suffixname","eloquent\\pathogen\\abstractpath::prefixname","eloquent\\pathogen\\abstractpath::replace","eloquent\\pathogen\\abstractpath::replacename","eloquent\\pathogen\\abstractpath::replacenamewithoutextension","eloquent\\pathogen\\abstractpath::replacenameprefix","eloquent\\pathogen\\abstractpath::replacenamesuffix","eloquent\\pathogen\\abstractpath::replaceextension","eloquent\\pathogen\\abstractpath::replacenameatoms","eloquent\\pathogen\\abstractpath::normalize","eloquent\\pathogen\\exception\\abstractinvalidpathatomexception::__construct","eloquent\\pathogen\\exception\\abstractinvalidpathatomexception::atom","eloquent\\pathogen\\exception\\abstractinvalidpathatomexception::reason","eloquent\\pathogen\\exception\\abstractinvalidpathexception::__construct","eloquent\\pathogen\\exception\\abstractinvalidpathexception::path","eloquent\\pathogen\\exception\\abstractinvalidpathexception::reason","eloquent\\pathogen\\exception\\emptypathatomexception::__construct","eloquent\\pathogen\\exception\\emptypathatomexception::reason","eloquent\\pathogen\\exception\\emptypathexception::__construct","eloquent\\pathogen\\exception\\invalidpathatomcharacterexception::__construct","eloquent\\pathogen\\exception\\invalidpathatomcharacterexception::character","eloquent\\pathogen\\exception\\invalidpathatomcharacterexception::reason","eloquent\\pathogen\\exception\\invalidpathatomexceptioninterface::atom","eloquent\\pathogen\\exception\\invalidpathatomexceptioninterface::reason","eloquent\\pathogen\\exception\\invalidpathexceptioninterface::path","eloquent\\pathogen\\exception\\invalidpathexceptioninterface::reason","eloquent\\pathogen\\exception\\invalidpathstateexception::__construct","eloquent\\pathogen\\exception\\invalidpathstateexception::reason","eloquent\\pathogen\\exception\\nonabsolutepathexception::reason","eloquent\\pathogen\\exception\\nonrelativepathexception::reason","eloquent\\pathogen\\exception\\pathatomcontainsseparatorexception::reason","eloquent\\pathogen\\exception\\undefinedatomexception::__construct","eloquent\\pathogen\\exception\\undefinedatomexception::index","eloquent\\pathogen\\factory\\pathfactory::instance","eloquent\\pathogen\\factory\\pathfactory::create","eloquent\\pathogen\\factory\\pathfactory::createfromatoms","eloquent\\pathogen\\factory\\pathfactoryinterface::create","eloquent\\pathogen\\factory\\pathfactoryinterface::createfromatoms","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory::__construct","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory::unixfactory","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory::windowsfactory","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory::createworkingdirectorypath","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory::createtemporarydirectorypath","eloquent\\pathogen\\filesystem\\factory\\abstractfilesystempathfactory::createtemporarypath","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactory::instance","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactory::create","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactory::createfromatoms","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactoryinterface::createworkingdirectorypath","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactoryinterface::createtemporarydirectorypath","eloquent\\pathogen\\filesystem\\factory\\filesystempathfactoryinterface::createtemporarypath","eloquent\\pathogen\\filesystem\\factory\\platformfilesystempathfactory::instance","eloquent\\pathogen\\filesystem\\factory\\platformfilesystempathfactory::create","eloquent\\pathogen\\filesystem\\factory\\platformfilesystempathfactory::createfromatoms","eloquent\\pathogen\\filesystem\\normalizer\\filesystempathnormalizer::instance","eloquent\\pathogen\\filesystem\\normalizer\\filesystempathnormalizer::__construct","eloquent\\pathogen\\filesystem\\normalizer\\filesystempathnormalizer::unixnormalizer","eloquent\\pathogen\\filesystem\\normalizer\\filesystempathnormalizer::windowsnormalizer","eloquent\\pathogen\\filesystem\\normalizer\\filesystempathnormalizer::normalize","eloquent\\pathogen\\normalizer\\pathnormalizer::instance","eloquent\\pathogen\\normalizer\\pathnormalizer::__construct","eloquent\\pathogen\\normalizer\\pathnormalizer::factory","eloquent\\pathogen\\normalizer\\pathnormalizer::normalize","eloquent\\pathogen\\normalizer\\pathnormalizerinterface::normalize","eloquent\\pathogen\\path::fromstring","eloquent\\pathogen\\path::fromatoms","eloquent\\pathogen\\pathinterface::atoms","eloquent\\pathogen\\pathinterface::atomat","eloquent\\pathogen\\pathinterface::atomatdefault","eloquent\\pathogen\\pathinterface::sliceatoms","eloquent\\pathogen\\pathinterface::hasatoms","eloquent\\pathogen\\pathinterface::hastrailingseparator","eloquent\\pathogen\\pathinterface::string","eloquent\\pathogen\\pathinterface::__tostring","eloquent\\pathogen\\pathinterface::name","eloquent\\pathogen\\pathinterface::nameatoms","eloquent\\pathogen\\pathinterface::nameatomat","eloquent\\pathogen\\pathinterface::nameatomatdefault","eloquent\\pathogen\\pathinterface::slicenameatoms","eloquent\\pathogen\\pathinterface::namewithoutextension","eloquent\\pathogen\\pathinterface::nameprefix","eloquent\\pathogen\\pathinterface::namesuffix","eloquent\\pathogen\\pathinterface::extension","eloquent\\pathogen\\pathinterface::hasextension","eloquent\\pathogen\\pathinterface::contains","eloquent\\pathogen\\pathinterface::startswith","eloquent\\pathogen\\pathinterface::endswith","eloquent\\pathogen\\pathinterface::matches","eloquent\\pathogen\\pathinterface::matchesregex","eloquent\\pathogen\\pathinterface::namecontains","eloquent\\pathogen\\pathinterface::namestartswith","eloquent\\pathogen\\pathinterface::namematches","eloquent\\pathogen\\pathinterface::namematchesregex","eloquent\\pathogen\\pathinterface::parent","eloquent\\pathogen\\pathinterface::striptrailingslash","eloquent\\pathogen\\pathinterface::stripextension","eloquent\\pathogen\\pathinterface::stripnamesuffix","eloquent\\pathogen\\pathinterface::joinatoms","eloquent\\pathogen\\pathinterface::joinatomsequence","eloquent\\pathogen\\pathinterface::join","eloquent\\pathogen\\pathinterface::jointrailingslash","eloquent\\pathogen\\pathinterface::joinextensions","eloquent\\pathogen\\pathinterface::joinextensionsequence","eloquent\\pathogen\\pathinterface::suffixname","eloquent\\pathogen\\pathinterface::prefixname","eloquent\\pathogen\\pathinterface::replace","eloquent\\pathogen\\pathinterface::replacename","eloquent\\pathogen\\pathinterface::replacenamewithoutextension","eloquent\\pathogen\\pathinterface::replacenameprefix","eloquent\\pathogen\\pathinterface::replacenamesuffix","eloquent\\pathogen\\pathinterface::replaceextension","eloquent\\pathogen\\pathinterface::replacenameatoms","eloquent\\pathogen\\pathinterface::toabsolute","eloquent\\pathogen\\pathinterface::torelative","eloquent\\pathogen\\pathinterface::normalize","eloquent\\pathogen\\relativepath::fromstring","eloquent\\pathogen\\relativepath::fromatoms","eloquent\\pathogen\\relativepath::toabsolute","eloquent\\pathogen\\relativepath::torelative","eloquent\\pathogen\\relativepath::isself","eloquent\\pathogen\\relativepath::resolveagainst","eloquent\\pathogen\\relativepathinterface::isself","eloquent\\pathogen\\relativepathinterface::resolveagainst","eloquent\\pathogen\\resolver\\basepathresolver::instance","eloquent\\pathogen\\resolver\\basepathresolver::resolve","eloquent\\pathogen\\resolver\\basepathresolverinterface::resolve","eloquent\\pathogen\\resolver\\boundpathresolver::__construct","eloquent\\pathogen\\resolver\\boundpathresolver::basepath","eloquent\\pathogen\\resolver\\boundpathresolver::resolver","eloquent\\pathogen\\resolver\\boundpathresolver::resolve","eloquent\\pathogen\\resolver\\pathresolverinterface::resolve","eloquent\\pathogen\\unix\\factory\\unixpathfactory::instance","eloquent\\pathogen\\unix\\factory\\unixpathfactory::createfromatoms","eloquent\\pathogen\\unix\\normalizer\\unixpathnormalizer::instance","eloquent\\pathogen\\unix\\normalizer\\unixpathnormalizer::__construct","eloquent\\pathogen\\windows\\absolutewindowspath::fromdriveandatoms","eloquent\\pathogen\\windows\\absolutewindowspath::__construct","eloquent\\pathogen\\windows\\absolutewindowspath::drive","eloquent\\pathogen\\windows\\absolutewindowspath::hasdrive","eloquent\\pathogen\\windows\\absolutewindowspath::matchesdrive","eloquent\\pathogen\\windows\\absolutewindowspath::matchesdriveornull","eloquent\\pathogen\\windows\\absolutewindowspath::joindrive","eloquent\\pathogen\\windows\\absolutewindowspath::isparentof","eloquent\\pathogen\\windows\\absolutewindowspath::isancestorof","eloquent\\pathogen\\windows\\absolutewindowspath::relativeto","eloquent\\pathogen\\windows\\absolutewindowspath::string","eloquent\\pathogen\\windows\\absolutewindowspath::join","eloquent\\pathogen\\windows\\absolutewindowspath::torelative","eloquent\\pathogen\\windows\\exception\\drivemismatchexception::__construct","eloquent\\pathogen\\windows\\exception\\drivemismatchexception::leftdrive","eloquent\\pathogen\\windows\\exception\\drivemismatchexception::rightdrive","eloquent\\pathogen\\windows\\exception\\invaliddrivespecifierexception::__construct","eloquent\\pathogen\\windows\\exception\\invaliddrivespecifierexception::drive","eloquent\\pathogen\\windows\\factory\\windowspathfactory::instance","eloquent\\pathogen\\windows\\factory\\windowspathfactory::create","eloquent\\pathogen\\windows\\factory\\windowspathfactory::createfromatoms","eloquent\\pathogen\\windows\\factory\\windowspathfactory::createfromdriveandatoms","eloquent\\pathogen\\windows\\factory\\windowspathfactoryinterface::createfromdriveandatoms","eloquent\\pathogen\\windows\\normalizer\\windowspathnormalizer::instance","eloquent\\pathogen\\windows\\normalizer\\windowspathnormalizer::__construct","eloquent\\pathogen\\windows\\normalizer\\windowspathnormalizer::normalize","eloquent\\pathogen\\windows\\relativewindowspath::fromdriveandatoms","eloquent\\pathogen\\windows\\relativewindowspath::__construct","eloquent\\pathogen\\windows\\relativewindowspath::drive","eloquent\\pathogen\\windows\\relativewindowspath::hasdrive","eloquent\\pathogen\\windows\\relativewindowspath::matchesdrive","eloquent\\pathogen\\windows\\relativewindowspath::matchesdriveornull","eloquent\\pathogen\\windows\\relativewindowspath::joindrive","eloquent\\pathogen\\windows\\relativewindowspath::isanchored","eloquent\\pathogen\\windows\\relativewindowspath::isself","eloquent\\pathogen\\windows\\relativewindowspath::string","eloquent\\pathogen\\windows\\relativewindowspath::join","eloquent\\pathogen\\windows\\relativewindowspath::toabsolute","eloquent\\pathogen\\windows\\relativewindowspathinterface::isanchored","eloquent\\pathogen\\windows\\resolver\\windowsbasepathresolver::instance","eloquent\\pathogen\\windows\\resolver\\windowsbasepathresolver::resolve","eloquent\\pathogen\\windows\\windowspath::fromdriveandatoms","eloquent\\pathogen\\windows\\windowspathinterface::drive","eloquent\\pathogen\\windows\\windowspathinterface::hasdrive","eloquent\\pathogen\\windows\\windowspathinterface::matchesdrive","eloquent\\pathogen\\windows\\windowspathinterface::matchesdriveornull","eloquent\\pathogen\\windows\\windowspathinterface::joindrive"],
        'info': [["Eloquent","","Eloquent.html","","",3],["Eloquent\\Pathogen","","Eloquent\/Pathogen.html","","",3],["Eloquent\\Pathogen\\Exception","","Eloquent\/Pathogen\/Exception.html","","",3],["Eloquent\\Pathogen\\Factory","","Eloquent\/Pathogen\/Factory.html","","",3],["Eloquent\\Pathogen\\FileSystem","","Eloquent\/Pathogen\/FileSystem.html","","",3],["Eloquent\\Pathogen\\FileSystem\\Factory","","Eloquent\/Pathogen\/FileSystem\/Factory.html","","",3],["Eloquent\\Pathogen\\FileSystem\\Normalizer","","Eloquent\/Pathogen\/FileSystem\/Normalizer.html","","",3],["Eloquent\\Pathogen\\Normalizer","","Eloquent\/Pathogen\/Normalizer.html","","",3],["Eloquent\\Pathogen\\Resolver","","Eloquent\/Pathogen\/Resolver.html","","",3],["Eloquent\\Pathogen\\Unix","","Eloquent\/Pathogen\/Unix.html","","",3],["Eloquent\\Pathogen\\Unix\\Factory","","Eloquent\/Pathogen\/Unix\/Factory.html","","",3],["Eloquent\\Pathogen\\Unix\\Normalizer","","Eloquent\/Pathogen\/Unix\/Normalizer.html","","",3],["Eloquent\\Pathogen\\Windows","","Eloquent\/Pathogen\/Windows.html","","",3],["Eloquent\\Pathogen\\Windows\\Exception","","Eloquent\/Pathogen\/Windows\/Exception.html","","",3],["Eloquent\\Pathogen\\Windows\\Factory","","Eloquent\/Pathogen\/Windows\/Factory.html","","",3],["Eloquent\\Pathogen\\Windows\\Normalizer","","Eloquent\/Pathogen\/Windows\/Normalizer.html","","",3],["Eloquent\\Pathogen\\Windows\\Resolver","","Eloquent\/Pathogen\/Windows\/Resolver.html","","",3],["AbsolutePath","Eloquent\\Pathogen","Eloquent\/Pathogen\/AbsolutePath.html"," < AbstractPath","Represents an absolute path.",1],["AbsolutePathInterface","Eloquent\\Pathogen","Eloquent\/Pathogen\/AbsolutePathInterface.html","","The interface implemented by absolute paths.",1],["AbstractPath","Eloquent\\Pathogen","Eloquent\/Pathogen\/AbstractPath.html","","Abstract base class for implementing PathInterface.",1],["AbstractInvalidPathAtomException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathAtomException.html"," < Exception","Abstract base class for exceptions implementing InvalidPathAtomExceptionInterface.",1],["AbstractInvalidPathException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathException.html"," < Exception","Abstract base class for exceptions implementing InvalidPathExceptionInterface.",1],["EmptyPathAtomException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/EmptyPathAtomException.html"," < AbstractInvalidPathAtomException","An empty path atom was supplied.",1],["EmptyPathException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/EmptyPathException.html"," < Exception","No path atoms were supplied when constructing a new",1],["InvalidPathAtomCharacterException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/InvalidPathAtomCharacterException.html"," < AbstractInvalidPathAtomException","An invalid character was encountered in a path atom.",1],["InvalidPathAtomExceptionInterface","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/InvalidPathAtomExceptionInterface.html","","Interface for exceptions that handle invalid path atom",1],["InvalidPathExceptionInterface","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/InvalidPathExceptionInterface.html","","Interface for exceptions that handle invalid path cases.",1],["InvalidPathStateException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/InvalidPathStateException.html"," < Exception","An attempt was made to construct a new path in an invalid",1],["NonAbsolutePathException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/NonAbsolutePathException.html"," < AbstractInvalidPathException","The supplied path is not absolute.",1],["NonRelativePathException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/NonRelativePathException.html"," < AbstractInvalidPathException","The supplied path is not relative.",1],["PathAtomContainsSeparatorException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/PathAtomContainsSeparatorException.html"," < AbstractInvalidPathAtomException","A supplied path atom contains a path separator.",1],["UndefinedAtomException","Eloquent\\Pathogen\\Exception","Eloquent\/Pathogen\/Exception\/UndefinedAtomException.html"," < Exception","An undefined atom was requested.",1],["PathFactory","Eloquent\\Pathogen\\Factory","Eloquent\/Pathogen\/Factory\/PathFactory.html","","A path factory that creates generic, Unix-style path",1],["PathFactoryInterface","Eloquent\\Pathogen\\Factory","Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html","","The interface implemented by path factories.",1],["AbsoluteFileSystemPathInterface","Eloquent\\Pathogen\\FileSystem","Eloquent\/Pathogen\/FileSystem\/AbsoluteFileSystemPathInterface.html","","The interface implemented by absolute file system paths.",1],["AbstractFileSystemPathFactory","Eloquent\\Pathogen\\FileSystem\\Factory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html","","Abstract base class for classes implementing FileSystemPathFactoryInterface.",1],["FileSystemPathFactory","Eloquent\\Pathogen\\FileSystem\\Factory","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactory.html"," < AbstractFileSystemPathFactory","A path factory that produces file system paths by inspecting",1],["FileSystemPathFactoryInterface","Eloquent\\Pathogen\\FileSystem\\Factory","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactoryInterface.html","","The interface implemented by path factories that deal",1],["PlatformFileSystemPathFactory","Eloquent\\Pathogen\\FileSystem\\Factory","Eloquent\/Pathogen\/FileSystem\/Factory\/PlatformFileSystemPathFactory.html"," < AbstractFileSystemPathFactory","A path factory that produces file system paths whose",1],["FileSystemPath","Eloquent\\Pathogen\\FileSystem","Eloquent\/Pathogen\/FileSystem\/FileSystemPath.html"," < Path","A static utility class for constructing file system",1],["FileSystemPathInterface","Eloquent\\Pathogen\\FileSystem","Eloquent\/Pathogen\/FileSystem\/FileSystemPathInterface.html","","The interface implemented by all file system paths.",1],["FileSystemPathNormalizer","Eloquent\\Pathogen\\FileSystem\\Normalizer","Eloquent\/Pathogen\/FileSystem\/Normalizer\/FileSystemPathNormalizer.html","","A path normalizer capable or normalizing any type of",1],["PlatformFileSystemPath","Eloquent\\Pathogen\\FileSystem","Eloquent\/Pathogen\/FileSystem\/PlatformFileSystemPath.html"," < Path","A static utility class for constructing file system",1],["RelativeFileSystemPathInterface","Eloquent\\Pathogen\\FileSystem","Eloquent\/Pathogen\/FileSystem\/RelativeFileSystemPathInterface.html","","The interface implemented by relative file system paths.",1],["PathNormalizer","Eloquent\\Pathogen\\Normalizer","Eloquent\/Pathogen\/Normalizer\/PathNormalizer.html","","A path normalizer suitable for generic, Unix-style",1],["PathNormalizerInterface","Eloquent\\Pathogen\\Normalizer","Eloquent\/Pathogen\/Normalizer\/PathNormalizerInterface.html","","The interface implemented by path normalizers.",1],["Path","Eloquent\\Pathogen","Eloquent\/Pathogen\/Path.html","","A static utility class for constructing generic paths.",1],["PathInterface","Eloquent\\Pathogen","Eloquent\/Pathogen\/PathInterface.html","","The interface implemented by all Pathogen paths.",1],["RelativePath","Eloquent\\Pathogen","Eloquent\/Pathogen\/RelativePath.html"," < AbstractPath","Represents a relative path.",1],["RelativePathInterface","Eloquent\\Pathogen","Eloquent\/Pathogen\/RelativePathInterface.html","","The interface implemented by relative paths.",1],["BasePathResolver","Eloquent\\Pathogen\\Resolver","Eloquent\/Pathogen\/Resolver\/BasePathResolver.html","","A path resolver that resolves against base paths.",1],["BasePathResolverInterface","Eloquent\\Pathogen\\Resolver","Eloquent\/Pathogen\/Resolver\/BasePathResolverInterface.html","","The interface implemented by path resolvers that resolve",1],["BoundPathResolver","Eloquent\\Pathogen\\Resolver","Eloquent\/Pathogen\/Resolver\/BoundPathResolver.html","","A path resolver that wraps another path resolver with",1],["PathResolverInterface","Eloquent\\Pathogen\\Resolver","Eloquent\/Pathogen\/Resolver\/PathResolverInterface.html","","The interface implemented by path resolvers that do",1],["AbsoluteUnixPath","Eloquent\\Pathogen\\Unix","Eloquent\/Pathogen\/Unix\/AbsoluteUnixPath.html"," < AbsolutePath","Represents an absolute Unix path.",1],["AbsoluteUnixPathInterface","Eloquent\\Pathogen\\Unix","Eloquent\/Pathogen\/Unix\/AbsoluteUnixPathInterface.html","","The interface implemented by absolute Unix paths.",1],["UnixPathFactory","Eloquent\\Pathogen\\Unix\\Factory","Eloquent\/Pathogen\/Unix\/Factory\/UnixPathFactory.html"," < PathFactory","A path factory that creates Unix path instances.",1],["UnixPathNormalizer","Eloquent\\Pathogen\\Unix\\Normalizer","Eloquent\/Pathogen\/Unix\/Normalizer\/UnixPathNormalizer.html"," < PathNormalizer","A path normalizer suitable for normalizing Unix paths.",1],["RelativeUnixPath","Eloquent\\Pathogen\\Unix","Eloquent\/Pathogen\/Unix\/RelativeUnixPath.html"," < RelativePath","Represents a relative Unix path.",1],["RelativeUnixPathInterface","Eloquent\\Pathogen\\Unix","Eloquent\/Pathogen\/Unix\/RelativeUnixPathInterface.html","","The interface implemented by relative Unix paths.",1],["UnixPath","Eloquent\\Pathogen\\Unix","Eloquent\/Pathogen\/Unix\/UnixPath.html"," < Path","A static utility class for constructing Unix paths.",1],["UnixPathInterface","Eloquent\\Pathogen\\Unix","Eloquent\/Pathogen\/Unix\/UnixPathInterface.html","","The interface implemented by all Unix paths.",1],["AbsoluteWindowsPath","Eloquent\\Pathogen\\Windows","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html"," < AbsolutePath","Represents an absolute Windows path.",1],["AbsoluteWindowsPathInterface","Eloquent\\Pathogen\\Windows","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPathInterface.html","","The interface implemented by absolute Windows paths.",1],["DriveMismatchException","Eloquent\\Pathogen\\Windows\\Exception","Eloquent\/Pathogen\/Windows\/Exception\/DriveMismatchException.html"," < Exception","The drive specifiers of the two paths do not match.",1],["InvalidDriveSpecifierException","Eloquent\\Pathogen\\Windows\\Exception","Eloquent\/Pathogen\/Windows\/Exception\/InvalidDriveSpecifierException.html"," < Exception","The provided drive specifier is invalid.",1],["WindowsPathFactory","Eloquent\\Pathogen\\Windows\\Factory","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactory.html"," < PathFactory","A path factory that creates Windows path instances.",1],["WindowsPathFactoryInterface","Eloquent\\Pathogen\\Windows\\Factory","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactoryInterface.html","","The interface implemented by path factories that create",1],["WindowsPathNormalizer","Eloquent\\Pathogen\\Windows\\Normalizer","Eloquent\/Pathogen\/Windows\/Normalizer\/WindowsPathNormalizer.html"," < PathNormalizer","A path normalizer suitable for normalizing Windows",1],["RelativeWindowsPath","Eloquent\\Pathogen\\Windows","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html"," < RelativePath","Represents a relative Windows path.",1],["RelativeWindowsPathInterface","Eloquent\\Pathogen\\Windows","Eloquent\/Pathogen\/Windows\/RelativeWindowsPathInterface.html","","The interface implemented by relative Windows paths.",1],["WindowsBasePathResolver","Eloquent\\Pathogen\\Windows\\Resolver","Eloquent\/Pathogen\/Windows\/Resolver\/WindowsBasePathResolver.html","","A path resolver that resolves against Windows base",1],["WindowsPath","Eloquent\\Pathogen\\Windows","Eloquent\/Pathogen\/Windows\/WindowsPath.html"," < Path","A static utility class for constructing Windows paths.",1],["WindowsPathInterface","Eloquent\\Pathogen\\Windows","Eloquent\/Pathogen\/Windows\/WindowsPathInterface.html","","The interface implemented by all Windows paths.",1],["AbsolutePath::fromString","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_fromString","(string $path)","Creates a new absolute path from its string representation.",2],["AbsolutePath::fromAtoms","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_fromAtoms","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $hasTrailingSeparator = null)","Creates a new absolute path from a set of path atoms.",2],["AbsolutePath::string","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_string","()","Generate a string representation of this path.",2],["AbsolutePath::joinTrailingSlash","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_joinTrailingSlash","()","Adds a trailing slash to this path.",2],["AbsolutePath::toAbsolute","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_toAbsolute","()","Get an absolute version of this path.",2],["AbsolutePath::toRelative","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_toRelative","()","Get a relative version of this path.",2],["AbsolutePath::isRoot","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_isRoot","()","Determine whether this path is the root path.",2],["AbsolutePath::isParentOf","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_isParentOf","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine if this path is the direct parent of the",2],["AbsolutePath::isAncestorOf","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_isAncestorOf","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine if this path is an ancestor of the supplied",2],["AbsolutePath::relativeTo","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_relativeTo","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine the shortest path from the supplied path",2],["AbsolutePath::resolve","Eloquent\\Pathogen\\AbsolutePath","Eloquent\/Pathogen\/AbsolutePath.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve the supplied path against this path.",2],["AbsolutePathInterface::isRoot","Eloquent\\Pathogen\\AbsolutePathInterface","Eloquent\/Pathogen\/AbsolutePathInterface.html#method_isRoot","()","Determine whether this path is the root path.",2],["AbsolutePathInterface::isParentOf","Eloquent\\Pathogen\\AbsolutePathInterface","Eloquent\/Pathogen\/AbsolutePathInterface.html#method_isParentOf","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine if this path is the direct parent of the",2],["AbsolutePathInterface::isAncestorOf","Eloquent\\Pathogen\\AbsolutePathInterface","Eloquent\/Pathogen\/AbsolutePathInterface.html#method_isAncestorOf","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine if this path is an ancestor of the supplied",2],["AbsolutePathInterface::relativeTo","Eloquent\\Pathogen\\AbsolutePathInterface","Eloquent\/Pathogen\/AbsolutePathInterface.html#method_relativeTo","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine the shortest path from the supplied path",2],["AbsolutePathInterface::resolve","Eloquent\\Pathogen\\AbsolutePathInterface","Eloquent\/Pathogen\/AbsolutePathInterface.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve the supplied path against this path.",2],["AbstractPath::__construct","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method___construct","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $hasTrailingSeparator = null)","Construct a new path instance.",2],["AbstractPath::atoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_atoms","()","Get the atoms of this path.",2],["AbstractPath::atomAt","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_atomAt","(integer $index)","Get a single path atom by index.",2],["AbstractPath::atomAtDefault","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_atomAtDefault","(integer $index, mixed $default = null)","Get a single path atom by index, falling back to a",2],["AbstractPath::sliceAtoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_sliceAtoms","(integer $index, integer|null $length = null)","Get a subset of the atoms of this path.",2],["AbstractPath::hasAtoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_hasAtoms","()","Determine if this path has any atoms.",2],["AbstractPath::hasTrailingSeparator","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_hasTrailingSeparator","()","Determine if this path has a trailing separator.",2],["AbstractPath::string","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_string","()","Generate a string representation of this path.",2],["AbstractPath::__toString","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method___toString","()","Generate a string representation of this path.",2],["AbstractPath::name","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_name","()","Get this path's name.",2],["AbstractPath::nameAtoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameAtoms","()","Get this path's name atoms.",2],["AbstractPath::nameAtomAt","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameAtomAt","(integer $index)","Get a single path name atom by index.",2],["AbstractPath::nameAtomAtDefault","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameAtomAtDefault","(integer $index, mixed $default = null)","Get a single path name atom by index, falling back",2],["AbstractPath::sliceNameAtoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_sliceNameAtoms","(integer $index, integer|null $length = null)","Get a subset of this path's name atoms.",2],["AbstractPath::nameWithoutExtension","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameWithoutExtension","()","Get this path's name, excluding the last extension.",2],["AbstractPath::namePrefix","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_namePrefix","()","Get this path's name, excluding all extensions.",2],["AbstractPath::nameSuffix","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameSuffix","()","Get all of this path's extensions.",2],["AbstractPath::extension","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_extension","()","Get this path's last extension.",2],["AbstractPath::hasExtension","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_hasExtension","()","Determine if this path has any extensions.",2],["AbstractPath::contains","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_contains","(string $needle, boolean|null $caseSensitive = null)","Determine if this path contains a substring.",2],["AbstractPath::startsWith","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_startsWith","(string $needle, boolean|null $caseSensitive = null)","Determine if this path starts with a substring.",2],["AbstractPath::endsWith","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_endsWith","(string $needle, boolean|null $caseSensitive = null)","Determine if this path ends with a substring.",2],["AbstractPath::matches","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_matches","(string $pattern, boolean|null $caseSensitive = null, integer|null $flags = null)","Determine if this path matches a wildcard pattern.",2],["AbstractPath::matchesRegex","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_matchesRegex","(string $pattern, array $matches = null, integer|null $flags = null, integer|null $offset = null)","Determine if this path matches a regular expression.",2],["AbstractPath::nameContains","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameContains","(string $needle, boolean|null $caseSensitive = null)","Determine if this path's name contains a substring.",2],["AbstractPath::nameStartsWith","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameStartsWith","(string $needle, boolean|null $caseSensitive = null)","Determine if this path's name starts with a substring.",2],["AbstractPath::nameMatches","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameMatches","(string $pattern, boolean|null $caseSensitive = null, integer|null $flags = null)","Determine if this path's name matches a wildcard pattern.",2],["AbstractPath::nameMatchesRegex","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_nameMatchesRegex","(string $pattern, array $matches = null, integer|null $flags = null, integer|null $offset = null)","Determine if this path's name matches a regular expression.",2],["AbstractPath::parent","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_parent","(integer|null $numLevels = null)","Get the parent of this path a specified number of levels",2],["AbstractPath::stripTrailingSlash","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_stripTrailingSlash","()","Strips the trailing slash from this path.",2],["AbstractPath::stripExtension","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_stripExtension","()","Strips the last extension from this path.",2],["AbstractPath::stripNameSuffix","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_stripNameSuffix","()","Strips all extensions from this path.",2],["AbstractPath::joinAtoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_joinAtoms","($atom)","Joins one or more atoms to this path.",2],["AbstractPath::joinAtomSequence","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_joinAtomSequence","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms)","Joins a sequence of atoms to this path.",2],["AbstractPath::join","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_join","(<a href=\"Eloquent\/Pathogen\/RelativePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\RelativePathInterface\">RelativePathInterface<\/abbr><\/a> $path)","Joins the supplied path to this path.",2],["AbstractPath::joinTrailingSlash","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_joinTrailingSlash","()","Adds a trailing slash to this path.",2],["AbstractPath::joinExtensions","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_joinExtensions","($extension)","Joins one or more extensions to this path.",2],["AbstractPath::joinExtensionSequence","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_joinExtensionSequence","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $extensions)","Joins a sequence of extensions to this path.",2],["AbstractPath::suffixName","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_suffixName","(string $suffix)","Suffixes this path's name with a supplied string.",2],["AbstractPath::prefixName","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_prefixName","(string $prefix)","Prefixes this path's name with a supplied string.",2],["AbstractPath::replace","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replace","(integer $index, <abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $replacement, integer|null $length = null)","Replace a section of this path with the supplied atom",2],["AbstractPath::replaceName","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replaceName","(string $name)","Replace this path's name.",2],["AbstractPath::replaceNameWithoutExtension","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replaceNameWithoutExtension","(string $nameWithoutExtension)","Replace this path's name, but keep the last extension.",2],["AbstractPath::replaceNamePrefix","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replaceNamePrefix","(string $namePrefix)","Replace this path's name, but keep any extensions.",2],["AbstractPath::replaceNameSuffix","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replaceNameSuffix","(string|null $nameSuffix)","Replace all of this path's extensions.",2],["AbstractPath::replaceExtension","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replaceExtension","(string|null $extension)","Replace this path's last extension.",2],["AbstractPath::replaceNameAtoms","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_replaceNameAtoms","(integer $index, <abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $replacement, integer|null $length = null)","Replace a section of this path's name with the supplied",2],["AbstractPath::normalize","Eloquent\\Pathogen\\AbstractPath","Eloquent\/Pathogen\/AbstractPath.html#method_normalize","()","Normalize this path to its most canonical form.",2],["AbstractInvalidPathAtomException::__construct","Eloquent\\Pathogen\\Exception\\AbstractInvalidPathAtomException","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathAtomException.html#method___construct","(string $atom, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new invalid path atom exception.",2],["AbstractInvalidPathAtomException::atom","Eloquent\\Pathogen\\Exception\\AbstractInvalidPathAtomException","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathAtomException.html#method_atom","()","Get the invalid path atom.",2],["AbstractInvalidPathAtomException::reason","Eloquent\\Pathogen\\Exception\\AbstractInvalidPathAtomException","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathAtomException.html#method_reason","()","Get the reason message.",2],["AbstractInvalidPathException::__construct","Eloquent\\Pathogen\\Exception\\AbstractInvalidPathException","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathException.html#method___construct","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new invalid path exception.",2],["AbstractInvalidPathException::path","Eloquent\\Pathogen\\Exception\\AbstractInvalidPathException","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathException.html#method_path","()","Get the invalid path.",2],["AbstractInvalidPathException::reason","Eloquent\\Pathogen\\Exception\\AbstractInvalidPathException","Eloquent\/Pathogen\/Exception\/AbstractInvalidPathException.html#method_reason","()","Get the reason message.",2],["EmptyPathAtomException::__construct","Eloquent\\Pathogen\\Exception\\EmptyPathAtomException","Eloquent\/Pathogen\/Exception\/EmptyPathAtomException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new empty path atom exception.",2],["EmptyPathAtomException::reason","Eloquent\\Pathogen\\Exception\\EmptyPathAtomException","Eloquent\/Pathogen\/Exception\/EmptyPathAtomException.html#method_reason","()","Get the reason message.",2],["EmptyPathException::__construct","Eloquent\\Pathogen\\Exception\\EmptyPathException","Eloquent\/Pathogen\/Exception\/EmptyPathException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new empty path exception.",2],["InvalidPathAtomCharacterException::__construct","Eloquent\\Pathogen\\Exception\\InvalidPathAtomCharacterException","Eloquent\/Pathogen\/Exception\/InvalidPathAtomCharacterException.html#method___construct","(string $atom, string $character, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new invalid path atom character exception.",2],["InvalidPathAtomCharacterException::character","Eloquent\\Pathogen\\Exception\\InvalidPathAtomCharacterException","Eloquent\/Pathogen\/Exception\/InvalidPathAtomCharacterException.html#method_character","()","Get the invalid character that caused the exception.",2],["InvalidPathAtomCharacterException::reason","Eloquent\\Pathogen\\Exception\\InvalidPathAtomCharacterException","Eloquent\/Pathogen\/Exception\/InvalidPathAtomCharacterException.html#method_reason","()","Get the reason message.",2],["InvalidPathAtomExceptionInterface::atom","Eloquent\\Pathogen\\Exception\\InvalidPathAtomExceptionInterface","Eloquent\/Pathogen\/Exception\/InvalidPathAtomExceptionInterface.html#method_atom","()","Get the invalid path atom.",2],["InvalidPathAtomExceptionInterface::reason","Eloquent\\Pathogen\\Exception\\InvalidPathAtomExceptionInterface","Eloquent\/Pathogen\/Exception\/InvalidPathAtomExceptionInterface.html#method_reason","()","Get the reason message.",2],["InvalidPathExceptionInterface::path","Eloquent\\Pathogen\\Exception\\InvalidPathExceptionInterface","Eloquent\/Pathogen\/Exception\/InvalidPathExceptionInterface.html#method_path","()","Get the invalid path.",2],["InvalidPathExceptionInterface::reason","Eloquent\\Pathogen\\Exception\\InvalidPathExceptionInterface","Eloquent\/Pathogen\/Exception\/InvalidPathExceptionInterface.html#method_reason","()","Get the reason message.",2],["InvalidPathStateException::__construct","Eloquent\\Pathogen\\Exception\\InvalidPathStateException","Eloquent\/Pathogen\/Exception\/InvalidPathStateException.html#method___construct","(string $reason, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new invalid path state exception.",2],["InvalidPathStateException::reason","Eloquent\\Pathogen\\Exception\\InvalidPathStateException","Eloquent\/Pathogen\/Exception\/InvalidPathStateException.html#method_reason","()","Get the reason message.",2],["NonAbsolutePathException::reason","Eloquent\\Pathogen\\Exception\\NonAbsolutePathException","Eloquent\/Pathogen\/Exception\/NonAbsolutePathException.html#method_reason","()","Get the reason message.",2],["NonRelativePathException::reason","Eloquent\\Pathogen\\Exception\\NonRelativePathException","Eloquent\/Pathogen\/Exception\/NonRelativePathException.html#method_reason","()","Get the reason message.",2],["PathAtomContainsSeparatorException::reason","Eloquent\\Pathogen\\Exception\\PathAtomContainsSeparatorException","Eloquent\/Pathogen\/Exception\/PathAtomContainsSeparatorException.html#method_reason","()","Get the reason message.",2],["UndefinedAtomException::__construct","Eloquent\\Pathogen\\Exception\\UndefinedAtomException","Eloquent\/Pathogen\/Exception\/UndefinedAtomException.html#method___construct","(integer $index, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Construct a new undefined atom exception.",2],["UndefinedAtomException::index","Eloquent\\Pathogen\\Exception\\UndefinedAtomException","Eloquent\/Pathogen\/Exception\/UndefinedAtomException.html#method_index","()","Get the requested atom index.",2],["PathFactory::instance","Eloquent\\Pathogen\\Factory\\PathFactory","Eloquent\/Pathogen\/Factory\/PathFactory.html#method_instance","()","Get a static instance of this path factory.",2],["PathFactory::create","Eloquent\\Pathogen\\Factory\\PathFactory","Eloquent\/Pathogen\/Factory\/PathFactory.html#method_create","(string $path)","Creates a new path instance from its string representation.",2],["PathFactory::createFromAtoms","Eloquent\\Pathogen\\Factory\\PathFactory","Eloquent\/Pathogen\/Factory\/PathFactory.html#method_createFromAtoms","(<abbr title=\"Eloquent\\Pathogen\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["PathFactoryInterface::create","Eloquent\\Pathogen\\Factory\\PathFactoryInterface","Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html#method_create","(string $path)","Creates a new path instance from its string representation.",2],["PathFactoryInterface::createFromAtoms","Eloquent\\Pathogen\\Factory\\PathFactoryInterface","Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html#method_createFromAtoms","(<abbr title=\"Eloquent\\Pathogen\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["AbstractFileSystemPathFactory::__construct","Eloquent\\Pathogen\\FileSystem\\Factory\\AbstractFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html#method___construct","(<a href=\"Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Factory\\PathFactoryInterface\">PathFactoryInterface<\/abbr><\/a> $unixFactory = null, <a href=\"Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Factory\\PathFactoryInterface\">PathFactoryInterface<\/abbr><\/a> $windowsFactory = null, <abbr title=\"Icecave\\Isolator\\Isolator\">Isolator<\/abbr> $isolator = null)","Construct a new file system path factory.",2],["AbstractFileSystemPathFactory::unixFactory","Eloquent\\Pathogen\\FileSystem\\Factory\\AbstractFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html#method_unixFactory","()","Get the path factory used for Unix paths.",2],["AbstractFileSystemPathFactory::windowsFactory","Eloquent\\Pathogen\\FileSystem\\Factory\\AbstractFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html#method_windowsFactory","()","Get the path factory used for Windows paths.",2],["AbstractFileSystemPathFactory::createWorkingDirectoryPath","Eloquent\\Pathogen\\FileSystem\\Factory\\AbstractFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html#method_createWorkingDirectoryPath","()","Create a path representing the current working directory.",2],["AbstractFileSystemPathFactory::createTemporaryDirectoryPath","Eloquent\\Pathogen\\FileSystem\\Factory\\AbstractFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html#method_createTemporaryDirectoryPath","()","Create a path representing the system temporary directory.",2],["AbstractFileSystemPathFactory::createTemporaryPath","Eloquent\\Pathogen\\FileSystem\\Factory\\AbstractFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/AbstractFileSystemPathFactory.html#method_createTemporaryPath","(string|null $prefix = null)","Create a path representing a suitable for use as the",2],["FileSystemPathFactory::instance","Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactory.html#method_instance","()","Get a static instance of this path factory.",2],["FileSystemPathFactory::create","Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactory.html#method_create","(string $path)","Creates a new path instance from its string representation.",2],["FileSystemPathFactory::createFromAtoms","Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactory.html#method_createFromAtoms","(<abbr title=\"Eloquent\\Pathogen\\FileSystem\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["FileSystemPathFactoryInterface::createWorkingDirectoryPath","Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactoryInterface","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactoryInterface.html#method_createWorkingDirectoryPath","()","Create a path representing the current working directory.",2],["FileSystemPathFactoryInterface::createTemporaryDirectoryPath","Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactoryInterface","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactoryInterface.html#method_createTemporaryDirectoryPath","()","Create a path representing the system temporary directory.",2],["FileSystemPathFactoryInterface::createTemporaryPath","Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactoryInterface","Eloquent\/Pathogen\/FileSystem\/Factory\/FileSystemPathFactoryInterface.html#method_createTemporaryPath","(string|null $prefix = null)","Create a path representing a suitable for use as the",2],["PlatformFileSystemPathFactory::instance","Eloquent\\Pathogen\\FileSystem\\Factory\\PlatformFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/PlatformFileSystemPathFactory.html#method_instance","()","Get a static instance of this path factory.",2],["PlatformFileSystemPathFactory::create","Eloquent\\Pathogen\\FileSystem\\Factory\\PlatformFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/PlatformFileSystemPathFactory.html#method_create","(string $path)","Creates a new path instance from its string representation.",2],["PlatformFileSystemPathFactory::createFromAtoms","Eloquent\\Pathogen\\FileSystem\\Factory\\PlatformFileSystemPathFactory","Eloquent\/Pathogen\/FileSystem\/Factory\/PlatformFileSystemPathFactory.html#method_createFromAtoms","(<abbr title=\"Eloquent\\Pathogen\\FileSystem\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["FileSystemPathNormalizer::instance","Eloquent\\Pathogen\\FileSystem\\Normalizer\\FileSystemPathNormalizer","Eloquent\/Pathogen\/FileSystem\/Normalizer\/FileSystemPathNormalizer.html#method_instance","()","Get a static instance of this path normalizer.",2],["FileSystemPathNormalizer::__construct","Eloquent\\Pathogen\\FileSystem\\Normalizer\\FileSystemPathNormalizer","Eloquent\/Pathogen\/FileSystem\/Normalizer\/FileSystemPathNormalizer.html#method___construct","(<a href=\"Eloquent\/Pathogen\/Normalizer\/PathNormalizerInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Normalizer\\PathNormalizerInterface\">PathNormalizerInterface<\/abbr><\/a> $unixNormalizer = null, <a href=\"Eloquent\/Pathogen\/Normalizer\/PathNormalizerInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Normalizer\\PathNormalizerInterface\">PathNormalizerInterface<\/abbr><\/a> $windowsNormalizer = null)","Construct a new file system path normalizer.",2],["FileSystemPathNormalizer::unixNormalizer","Eloquent\\Pathogen\\FileSystem\\Normalizer\\FileSystemPathNormalizer","Eloquent\/Pathogen\/FileSystem\/Normalizer\/FileSystemPathNormalizer.html#method_unixNormalizer","()","Get the path normalizer used for Unix paths.",2],["FileSystemPathNormalizer::windowsNormalizer","Eloquent\\Pathogen\\FileSystem\\Normalizer\\FileSystemPathNormalizer","Eloquent\/Pathogen\/FileSystem\/Normalizer\/FileSystemPathNormalizer.html#method_windowsNormalizer","()","Get the path normalizer used for Windows paths.",2],["FileSystemPathNormalizer::normalize","Eloquent\\Pathogen\\FileSystem\\Normalizer\\FileSystemPathNormalizer","Eloquent\/Pathogen\/FileSystem\/Normalizer\/FileSystemPathNormalizer.html#method_normalize","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Normalize the supplied path to its most canonical form.",2],["PathNormalizer::instance","Eloquent\\Pathogen\\Normalizer\\PathNormalizer","Eloquent\/Pathogen\/Normalizer\/PathNormalizer.html#method_instance","()","Get a static instance of this path normalizer.",2],["PathNormalizer::__construct","Eloquent\\Pathogen\\Normalizer\\PathNormalizer","Eloquent\/Pathogen\/Normalizer\/PathNormalizer.html#method___construct","(<a href=\"Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Factory\\PathFactoryInterface\">PathFactoryInterface<\/abbr><\/a> $factory = null)","Construct a new path normalizer.",2],["PathNormalizer::factory","Eloquent\\Pathogen\\Normalizer\\PathNormalizer","Eloquent\/Pathogen\/Normalizer\/PathNormalizer.html#method_factory","()","Get the path factory used by this normalizer.",2],["PathNormalizer::normalize","Eloquent\\Pathogen\\Normalizer\\PathNormalizer","Eloquent\/Pathogen\/Normalizer\/PathNormalizer.html#method_normalize","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Normalize the supplied path to its most canonical form.",2],["PathNormalizerInterface::normalize","Eloquent\\Pathogen\\Normalizer\\PathNormalizerInterface","Eloquent\/Pathogen\/Normalizer\/PathNormalizerInterface.html#method_normalize","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Normalize the supplied path to its most canonical form.",2],["Path::fromString","Eloquent\\Pathogen\\Path","Eloquent\/Pathogen\/Path.html#method_fromString","(string $path)","Creates a new path instance from its string representation.",2],["Path::fromAtoms","Eloquent\\Pathogen\\Path","Eloquent\/Pathogen\/Path.html#method_fromAtoms","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["PathInterface::atoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_atoms","()","Get the atoms of this path.",2],["PathInterface::atomAt","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_atomAt","(integer $index)","Get a single path atom by index.",2],["PathInterface::atomAtDefault","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_atomAtDefault","(integer $index, mixed $default = null)","Get a single path atom by index, falling back to a",2],["PathInterface::sliceAtoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_sliceAtoms","(integer $index, integer|null $length = null)","Get a subset of the atoms of this path.",2],["PathInterface::hasAtoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_hasAtoms","()","Determine if this path has any atoms.",2],["PathInterface::hasTrailingSeparator","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_hasTrailingSeparator","()","Determine if this path has a trailing separator.",2],["PathInterface::string","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_string","()","Generate a string representation of this path.",2],["PathInterface::__toString","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method___toString","()","Generate a string representation of this path.",2],["PathInterface::name","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_name","()","Get this path's name.",2],["PathInterface::nameAtoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameAtoms","()","Get this path's name atoms.",2],["PathInterface::nameAtomAt","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameAtomAt","(integer $index)","Get a single path name atom by index.",2],["PathInterface::nameAtomAtDefault","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameAtomAtDefault","(integer $index, mixed $default = null)","Get a single path name atom by index, falling back",2],["PathInterface::sliceNameAtoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_sliceNameAtoms","(integer $index, integer|null $length = null)","Get a subset of this path's name atoms.",2],["PathInterface::nameWithoutExtension","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameWithoutExtension","()","Get this path's name, excluding the last extension.",2],["PathInterface::namePrefix","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_namePrefix","()","Get this path's name, excluding all extensions.",2],["PathInterface::nameSuffix","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameSuffix","()","Get all of this path's extensions.",2],["PathInterface::extension","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_extension","()","Get this path's last extension.",2],["PathInterface::hasExtension","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_hasExtension","()","Determine if this path has any extensions.",2],["PathInterface::contains","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_contains","(string $needle, boolean|null $caseSensitive = null)","Determine if this path contains a substring.",2],["PathInterface::startsWith","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_startsWith","(string $needle, boolean|null $caseSensitive = null)","Determine if this path starts with a substring.",2],["PathInterface::endsWith","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_endsWith","(string $needle, boolean|null $caseSensitive = null)","Determine if this path ends with a substring.",2],["PathInterface::matches","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_matches","(string $pattern, boolean|null $caseSensitive = null, integer|null $flags = null)","Determine if this path matches a wildcard pattern.",2],["PathInterface::matchesRegex","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_matchesRegex","(string $pattern, array $matches = null, integer|null $flags = null, integer|null $offset = null)","Determine if this path matches a regular expression.",2],["PathInterface::nameContains","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameContains","(string $needle, boolean|null $caseSensitive = null)","Determine if this path's name contains a substring.",2],["PathInterface::nameStartsWith","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameStartsWith","(string $needle, boolean|null $caseSensitive = null)","Determine if this path's name starts with a substring.",2],["PathInterface::nameMatches","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameMatches","(string $pattern, boolean|null $caseSensitive = null, integer|null $flags = null)","Determine if this path's name matches a wildcard pattern.",2],["PathInterface::nameMatchesRegex","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_nameMatchesRegex","(string $pattern, array $matches = null, integer|null $flags = null, integer|null $offset = null)","Determine if this path's name matches a regular expression.",2],["PathInterface::parent","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_parent","(integer|null $numLevels = null)","Get the parent of this path a specified number of levels",2],["PathInterface::stripTrailingSlash","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_stripTrailingSlash","()","Strips the trailing slash from this path.",2],["PathInterface::stripExtension","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_stripExtension","()","Strips the last extension from this path.",2],["PathInterface::stripNameSuffix","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_stripNameSuffix","()","Strips all extensions from this path.",2],["PathInterface::joinAtoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_joinAtoms","($atom)","Joins one or more atoms to this path.",2],["PathInterface::joinAtomSequence","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_joinAtomSequence","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms)","Joins a sequence of atoms to this path.",2],["PathInterface::join","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_join","(<a href=\"Eloquent\/Pathogen\/RelativePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\RelativePathInterface\">RelativePathInterface<\/abbr><\/a> $path)","Joins the supplied path to this path.",2],["PathInterface::joinTrailingSlash","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_joinTrailingSlash","()","Adds a trailing slash to this path.",2],["PathInterface::joinExtensions","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_joinExtensions","($extension)","Joins one or more extensions to this path.",2],["PathInterface::joinExtensionSequence","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_joinExtensionSequence","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $extensions)","Joins a sequence of extensions to this path.",2],["PathInterface::suffixName","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_suffixName","(string $suffix)","Suffixes this path's name with a supplied string.",2],["PathInterface::prefixName","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_prefixName","(string $prefix)","Prefixes this path's name with a supplied string.",2],["PathInterface::replace","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replace","(integer $index, <abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $replacement, integer|null $length = null)","Replace a section of this path with the supplied atom",2],["PathInterface::replaceName","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replaceName","(string $name)","Replace this path's name.",2],["PathInterface::replaceNameWithoutExtension","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replaceNameWithoutExtension","(string $nameWithoutExtension)","Replace this path's name, but keep the last extension.",2],["PathInterface::replaceNamePrefix","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replaceNamePrefix","(string $namePrefix)","Replace this path's name, but keep any extensions.",2],["PathInterface::replaceNameSuffix","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replaceNameSuffix","(string|null $nameSuffix)","Replace all of this path's extensions.",2],["PathInterface::replaceExtension","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replaceExtension","(string|null $extension)","Replace this path's last extension.",2],["PathInterface::replaceNameAtoms","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_replaceNameAtoms","(integer $index, <abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $replacement, integer|null $length = null)","Replace a section of this path's name with the supplied",2],["PathInterface::toAbsolute","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_toAbsolute","()","Get an absolute version of this path.",2],["PathInterface::toRelative","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_toRelative","()","Get a relative version of this path.",2],["PathInterface::normalize","Eloquent\\Pathogen\\PathInterface","Eloquent\/Pathogen\/PathInterface.html#method_normalize","()","Normalize this path to its most canonical form.",2],["RelativePath::fromString","Eloquent\\Pathogen\\RelativePath","Eloquent\/Pathogen\/RelativePath.html#method_fromString","(string $path)","Creates a new relative path instance from its string",2],["RelativePath::fromAtoms","Eloquent\\Pathogen\\RelativePath","Eloquent\/Pathogen\/RelativePath.html#method_fromAtoms","(<abbr title=\"Eloquent\\Pathogen\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $hasTrailingSeparator = null)","Creates a new relative path from a set of path atoms.",2],["RelativePath::toAbsolute","Eloquent\\Pathogen\\RelativePath","Eloquent\/Pathogen\/RelativePath.html#method_toAbsolute","()","Get an absolute version of this path.",2],["RelativePath::toRelative","Eloquent\\Pathogen\\RelativePath","Eloquent\/Pathogen\/RelativePath.html#method_toRelative","()","Get a relative version of this path.",2],["RelativePath::isSelf","Eloquent\\Pathogen\\RelativePath","Eloquent\/Pathogen\/RelativePath.html#method_isSelf","()","Determine whether this path is the self path.",2],["RelativePath::resolveAgainst","Eloquent\\Pathogen\\RelativePath","Eloquent\/Pathogen\/RelativePath.html#method_resolveAgainst","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $basePath)","Resolve this path against the supplied path.",2],["RelativePathInterface::isSelf","Eloquent\\Pathogen\\RelativePathInterface","Eloquent\/Pathogen\/RelativePathInterface.html#method_isSelf","()","Determine whether this path is the self path.",2],["RelativePathInterface::resolveAgainst","Eloquent\\Pathogen\\RelativePathInterface","Eloquent\/Pathogen\/RelativePathInterface.html#method_resolveAgainst","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $basePath)","Resolve this path against the supplied path.",2],["BasePathResolver::instance","Eloquent\\Pathogen\\Resolver\\BasePathResolver","Eloquent\/Pathogen\/Resolver\/BasePathResolver.html#method_instance","()","Get a static instance of this base path resolver.",2],["BasePathResolver::resolve","Eloquent\\Pathogen\\Resolver\\BasePathResolver","Eloquent\/Pathogen\/Resolver\/BasePathResolver.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $basePath, <a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve a path against a given base path.",2],["BasePathResolverInterface::resolve","Eloquent\\Pathogen\\Resolver\\BasePathResolverInterface","Eloquent\/Pathogen\/Resolver\/BasePathResolverInterface.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $basePath, <a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve a path against a given base path.",2],["BoundPathResolver::__construct","Eloquent\\Pathogen\\Resolver\\BoundPathResolver","Eloquent\/Pathogen\/Resolver\/BoundPathResolver.html#method___construct","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $basePath, <a href=\"Eloquent\/Pathogen\/Resolver\/BasePathResolverInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Resolver\\BasePathResolverInterface\">BasePathResolverInterface<\/abbr><\/a> $resolver = null)","Construct a new bound path resolver.",2],["BoundPathResolver::basePath","Eloquent\\Pathogen\\Resolver\\BoundPathResolver","Eloquent\/Pathogen\/Resolver\/BoundPathResolver.html#method_basePath","()","Get the base path used by this resolver.",2],["BoundPathResolver::resolver","Eloquent\\Pathogen\\Resolver\\BoundPathResolver","Eloquent\/Pathogen\/Resolver\/BoundPathResolver.html#method_resolver","()","Get the base path resolver used internally by this",2],["BoundPathResolver::resolve","Eloquent\\Pathogen\\Resolver\\BoundPathResolver","Eloquent\/Pathogen\/Resolver\/BoundPathResolver.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve a path against the base path.",2],["PathResolverInterface::resolve","Eloquent\\Pathogen\\Resolver\\PathResolverInterface","Eloquent\/Pathogen\/Resolver\/PathResolverInterface.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve the supplied path.",2],["UnixPathFactory::instance","Eloquent\\Pathogen\\Unix\\Factory\\UnixPathFactory","Eloquent\/Pathogen\/Unix\/Factory\/UnixPathFactory.html#method_instance","()","Get a static instance of this path factory.",2],["UnixPathFactory::createFromAtoms","Eloquent\\Pathogen\\Unix\\Factory\\UnixPathFactory","Eloquent\/Pathogen\/Unix\/Factory\/UnixPathFactory.html#method_createFromAtoms","(<abbr title=\"Eloquent\\Pathogen\\Unix\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["UnixPathNormalizer::instance","Eloquent\\Pathogen\\Unix\\Normalizer\\UnixPathNormalizer","Eloquent\/Pathogen\/Unix\/Normalizer\/UnixPathNormalizer.html#method_instance","()","Get a static instance of this path normalizer.",2],["UnixPathNormalizer::__construct","Eloquent\\Pathogen\\Unix\\Normalizer\\UnixPathNormalizer","Eloquent\/Pathogen\/Unix\/Normalizer\/UnixPathNormalizer.html#method___construct","(<a href=\"Eloquent\/Pathogen\/Factory\/PathFactoryInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Factory\\PathFactoryInterface\">PathFactoryInterface<\/abbr><\/a> $factory = null)","Construct a new path normalizer.",2],["AbsoluteWindowsPath::fromDriveAndAtoms","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_fromDriveAndAtoms","(string $drive, <abbr title=\"Eloquent\\Pathogen\\Windows\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $hasTrailingSeparator = null)","Creates a new absolute Windows path from a set of path",2],["AbsoluteWindowsPath::__construct","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method___construct","(string $drive, <abbr title=\"Eloquent\\Pathogen\\Windows\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $hasTrailingSeparator = null)","Construct a new path instance.",2],["AbsoluteWindowsPath::drive","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_drive","()","Get this path's drive specifier.",2],["AbsoluteWindowsPath::hasDrive","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_hasDrive","()","Determine whether this path has a drive specifier.",2],["AbsoluteWindowsPath::matchesDrive","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_matchesDrive","(string|null $drive)","Returns true if this path's drive specifier is equal",2],["AbsoluteWindowsPath::matchesDriveOrNull","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_matchesDriveOrNull","(string|null $drive)","Returns true if this path's drive specifier matches",2],["AbsoluteWindowsPath::joinDrive","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_joinDrive","($drive)","Joins the supplied drive specifier to this path.",2],["AbsoluteWindowsPath::isParentOf","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_isParentOf","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine if this path is the direct parent of the",2],["AbsoluteWindowsPath::isAncestorOf","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_isAncestorOf","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine if this path is an ancestor of the supplied",2],["AbsoluteWindowsPath::relativeTo","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_relativeTo","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $path)","Determine the shortest path from the supplied path",2],["AbsoluteWindowsPath::string","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_string","()","Generate a string representation of this path.",2],["AbsoluteWindowsPath::join","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_join","(<a href=\"Eloquent\/Pathogen\/RelativePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\RelativePathInterface\">RelativePathInterface<\/abbr><\/a> $path)","Joins the supplied path to this path.",2],["AbsoluteWindowsPath::toRelative","Eloquent\\Pathogen\\Windows\\AbsoluteWindowsPath","Eloquent\/Pathogen\/Windows\/AbsoluteWindowsPath.html#method_toRelative","()","Get a relative version of this path.",2],["DriveMismatchException::__construct","Eloquent\\Pathogen\\Windows\\Exception\\DriveMismatchException","Eloquent\/Pathogen\/Windows\/Exception\/DriveMismatchException.html#method___construct","(string $leftDrive, string $rightDrive, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Constructs a new drive specifier mismatch exception.",2],["DriveMismatchException::leftDrive","Eloquent\\Pathogen\\Windows\\Exception\\DriveMismatchException","Eloquent\/Pathogen\/Windows\/Exception\/DriveMismatchException.html#method_leftDrive","()","Get the left-hand drive specifier.",2],["DriveMismatchException::rightDrive","Eloquent\\Pathogen\\Windows\\Exception\\DriveMismatchException","Eloquent\/Pathogen\/Windows\/Exception\/DriveMismatchException.html#method_rightDrive","()","Get the right-hand drive specifier.",2],["InvalidDriveSpecifierException::__construct","Eloquent\\Pathogen\\Windows\\Exception\\InvalidDriveSpecifierException","Eloquent\/Pathogen\/Windows\/Exception\/InvalidDriveSpecifierException.html#method___construct","(string $drive, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","Constructs a new invalid drive specifier exception.",2],["InvalidDriveSpecifierException::drive","Eloquent\\Pathogen\\Windows\\Exception\\InvalidDriveSpecifierException","Eloquent\/Pathogen\/Windows\/Exception\/InvalidDriveSpecifierException.html#method_drive","()","Get the invalid drive specifier.",2],["WindowsPathFactory::instance","Eloquent\\Pathogen\\Windows\\Factory\\WindowsPathFactory","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactory.html#method_instance","()","Get a static instance of this path factory.",2],["WindowsPathFactory::create","Eloquent\\Pathogen\\Windows\\Factory\\WindowsPathFactory","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactory.html#method_create","(string $path)","Creates a new path instance from its string representation.",2],["WindowsPathFactory::createFromAtoms","Eloquent\\Pathogen\\Windows\\Factory\\WindowsPathFactory","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactory.html#method_createFromAtoms","(<abbr title=\"Eloquent\\Pathogen\\Windows\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, boolean|null $isAbsolute = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms.",2],["WindowsPathFactory::createFromDriveAndAtoms","Eloquent\\Pathogen\\Windows\\Factory\\WindowsPathFactory","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactory.html#method_createFromDriveAndAtoms","(<abbr title=\"Eloquent\\Pathogen\\Windows\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, string|null $drive = null, boolean|null $isAbsolute = null, boolean|null $isAnchored = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms",2],["WindowsPathFactoryInterface::createFromDriveAndAtoms","Eloquent\\Pathogen\\Windows\\Factory\\WindowsPathFactoryInterface","Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactoryInterface.html#method_createFromDriveAndAtoms","(<abbr title=\"Eloquent\\Pathogen\\Windows\\Factory\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, string|null $drive, boolean|null $isAbsolute = null, boolean|null $isAnchored = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms",2],["WindowsPathNormalizer::instance","Eloquent\\Pathogen\\Windows\\Normalizer\\WindowsPathNormalizer","Eloquent\/Pathogen\/Windows\/Normalizer\/WindowsPathNormalizer.html#method_instance","()","Get a static instance of this path normalizer.",2],["WindowsPathNormalizer::__construct","Eloquent\\Pathogen\\Windows\\Normalizer\\WindowsPathNormalizer","Eloquent\/Pathogen\/Windows\/Normalizer\/WindowsPathNormalizer.html#method___construct","(<a href=\"Eloquent\/Pathogen\/Windows\/Factory\/WindowsPathFactoryInterface.html\"><abbr title=\"Eloquent\\Pathogen\\Windows\\Factory\\WindowsPathFactoryInterface\">WindowsPathFactoryInterface<\/abbr><\/a> $factory = null)","Construct a new Windows path normalizer.",2],["WindowsPathNormalizer::normalize","Eloquent\\Pathogen\\Windows\\Normalizer\\WindowsPathNormalizer","Eloquent\/Pathogen\/Windows\/Normalizer\/WindowsPathNormalizer.html#method_normalize","(<a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Normalize the supplied path to its most canonical form.",2],["RelativeWindowsPath::fromDriveAndAtoms","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_fromDriveAndAtoms","(<abbr title=\"Eloquent\\Pathogen\\Windows\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, string|null $drive = null, boolean|null $isAnchored = null, boolean|null $hasTrailingSeparator = null)","Creates a new relative Windows path from a set of path",2],["RelativeWindowsPath::__construct","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method___construct","(<abbr title=\"Eloquent\\Pathogen\\Windows\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, string|null $drive = null, boolean|null $isAnchored = null, boolean|null $hasTrailingSeparator = null)","Construct a new relative Windows path instance.",2],["RelativeWindowsPath::drive","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_drive","()","Get this path's drive specifier.",2],["RelativeWindowsPath::hasDrive","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_hasDrive","()","Determine whether this path has a drive specifier.",2],["RelativeWindowsPath::matchesDrive","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_matchesDrive","(string|null $drive)","Returns true if this path's drive specifier is equal",2],["RelativeWindowsPath::matchesDriveOrNull","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_matchesDriveOrNull","(string|null $drive)","Returns true if this path's drive specifier matches",2],["RelativeWindowsPath::joinDrive","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_joinDrive","($drive)","Joins the supplied drive specifier to this path.",2],["RelativeWindowsPath::isAnchored","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_isAnchored","()","Returns true if this path is 'anchored' to the drive",2],["RelativeWindowsPath::isSelf","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_isSelf","()","Determine whether this path is the self path.",2],["RelativeWindowsPath::string","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_string","()","Generate a string representation of this path.",2],["RelativeWindowsPath::join","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_join","(<a href=\"Eloquent\/Pathogen\/RelativePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\RelativePathInterface\">RelativePathInterface<\/abbr><\/a> $path)","Joins the supplied path to this path.",2],["RelativeWindowsPath::toAbsolute","Eloquent\\Pathogen\\Windows\\RelativeWindowsPath","Eloquent\/Pathogen\/Windows\/RelativeWindowsPath.html#method_toAbsolute","()","Get an absolute version of this path.",2],["RelativeWindowsPathInterface::isAnchored","Eloquent\\Pathogen\\Windows\\RelativeWindowsPathInterface","Eloquent\/Pathogen\/Windows\/RelativeWindowsPathInterface.html#method_isAnchored","()","Returns true if this path is 'anchored' to the drive",2],["WindowsBasePathResolver::instance","Eloquent\\Pathogen\\Windows\\Resolver\\WindowsBasePathResolver","Eloquent\/Pathogen\/Windows\/Resolver\/WindowsBasePathResolver.html#method_instance","()","Get a static instance of this base path resolver.",2],["WindowsBasePathResolver::resolve","Eloquent\\Pathogen\\Windows\\Resolver\\WindowsBasePathResolver","Eloquent\/Pathogen\/Windows\/Resolver\/WindowsBasePathResolver.html#method_resolve","(<a href=\"Eloquent\/Pathogen\/AbsolutePathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\AbsolutePathInterface\">AbsolutePathInterface<\/abbr><\/a> $basePath, <a href=\"Eloquent\/Pathogen\/PathInterface.html\"><abbr title=\"Eloquent\\Pathogen\\PathInterface\">PathInterface<\/abbr><\/a> $path)","Resolve a path against a given base path.",2],["WindowsPath::fromDriveAndAtoms","Eloquent\\Pathogen\\Windows\\WindowsPath","Eloquent\/Pathogen\/Windows\/WindowsPath.html#method_fromDriveAndAtoms","(<abbr title=\"Eloquent\\Pathogen\\Windows\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $atoms, string|null $drive = null, boolean|null $isAbsolute = null, boolean|null $isAnchored = null, boolean|null $hasTrailingSeparator = null)","Creates a new path instance from a set of path atoms",2],["WindowsPathInterface::drive","Eloquent\\Pathogen\\Windows\\WindowsPathInterface","Eloquent\/Pathogen\/Windows\/WindowsPathInterface.html#method_drive","()","Get this path's drive specifier.",2],["WindowsPathInterface::hasDrive","Eloquent\\Pathogen\\Windows\\WindowsPathInterface","Eloquent\/Pathogen\/Windows\/WindowsPathInterface.html#method_hasDrive","()","Determine whether this path has a drive specifier.",2],["WindowsPathInterface::matchesDrive","Eloquent\\Pathogen\\Windows\\WindowsPathInterface","Eloquent\/Pathogen\/Windows\/WindowsPathInterface.html#method_matchesDrive","(string|null $drive)","Returns true if this path's drive specifier matches",2],["WindowsPathInterface::matchesDriveOrNull","Eloquent\\Pathogen\\Windows\\WindowsPathInterface","Eloquent\/Pathogen\/Windows\/WindowsPathInterface.html#method_matchesDriveOrNull","(string|null $drive)","Returns true if this path's drive specifier matches",2],["WindowsPathInterface::joinDrive","Eloquent\\Pathogen\\Windows\\WindowsPathInterface","Eloquent\/Pathogen\/Windows\/WindowsPathInterface.html#method_joinDrive","($drive)","Joins the supplied drive specifier to this path.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']